{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to fqlearn","text":"<p>This Project aims to facilitate the teaching of unit operations and thermodynamics. Designed in python, it intends to be a library that uses graphical methods and that applies modern equations solve problems related.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>McCabeThiele module for binary destilations.</li> <li>SteamTables for water extraction properties (under revision).</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Please refer to our section contributing.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the CC-BY-4.0</p>"},{"location":"about/","title":"About section","text":""},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at github:fqlearn/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in     troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at github:fqlearn/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to     implement.</li> <li>Remember that this is a volunteer-driven project, and that     contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>For development, we encourage you to use <code>conda</code>. If you don't know what is that, check these links:</p> <ul> <li>https://docs.conda.io/en/latest/</li> </ul> <p>We recommend you to use mamba-forge, a combination of miniconda + conda-forge + mamba. You can download it from here: https://github.com/conda-forge/miniforge#mambaforge</p> <p>Ready to contribute? Here\u2019s how to set up fqlearn for local development.</p> <ol> <li>Clone this repository locally:</li> </ol> <pre><code>$ git clone git@github.com:osl-pocs/fqlearn.git\n</code></pre> <ol> <li>Create a conda environment and activate it:</li> </ol> <pre><code>$ cd fqlearn\n$ mamba env create --file conda/base.yaml\n</code></pre> <p>and</p> <pre><code>$ conda activate fqlearn\n</code></pre> <ol> <li>Install your local project copy into your conda environment:</li> </ol> <pre><code>$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</li> </ol> <pre><code>$ pytest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python == 3.10</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":""},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>fix!: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"mcthiele-module/","title":"McCabeThiele module","text":"<p>This class is used to graphically solve binary distillation problems using the McCabeThiele method.</p>"},{"location":"mcthiele-module/#brief-mathematical-intro","title":"Brief mathematical intro","text":"<p>The equations used for the solution are:</p> <p>Enriching operation line</p> \\[ y_{n+1} = \\frac{R}{R+1} x_n + \\frac{1}{R+1} x_D \\] <p>Stripping operation line</p> \\[ y_{m+1} = \\frac{L_m}{V_m} x_m + \\frac{W}{V_m} x_W \\] <p>Feed operation line</p> \\[ y = \\frac{q}{q-1} x - \\frac{1}{q-1} x_F \\] <p>Where</p> <p>\\(y\\), \\(x\\) : Molar compositions in the vapor and liquid phase respectively.</p> <p>\\(n\\), \\(m\\) : Step in the enriching and stripping section respectively.</p> <p>\\(R = L_n/D\\) : Reflux</p> <p>\\(W\\) :  Bottom liquid product.</p> <p>\\(L\\), \\(V\\) : Liquid and vapor flux in the column (constant in every step).</p> <p>\\(q\\) : mole fraction of the liquid in the feed.</p> \\[ q = \\frac{heat\\enspace needed \\enspace to \\enspace vaporize \\enspace 1\\enspace mol \\enspace of \\enspace feed \\enspace at \\enspace entering \\enspace conditions}{molar \\enspace latent \\enspace heat \\enspace of \\enspace vaporization \\enspace of \\enspace feed} \\]"},{"location":"mcthiele-module/#example","title":"Example","text":"<pre><code># importing fqlearn library\nfrom fqlearn.McCabeThiele import McCabeThiele\n\nmodel = McCabeThiele()\n\n# Set compounds \nmodel.set_data(compound_a=\"methanol\", compound_b=\"water\")\n\n# Set desired compositions in the distilate (xD) and the Bottom liquid (xW) \nmodel.set_compositions(xD=0.94, xW=0.05)\n\n# Set feed values \nmodel.set_feed(q=0.5, xF=0.5)\n\n# Solve the model \nmodel.solve()\n\n# Print results \nmodel.describe()\n\n# Plot results\nmodel.plot()\n</code></pre> <p>After executing the code above you will see:</p> <pre><code>- El reflujo m\u00ednimo es de: 0.7480780119884876\n- La composici\u00f3n l\u00edquida de salida: 0.05\n\n### Composici\u00f3n de entrada y salida en cada etapa:\n  - Etapa 1: Entrada = 0.9400, Salida = 0.9400\n  - Etapa 2: Entrada = 0.8783, Salida = 0.9400\n  - Etapa 3: Entrada = 0.8783, Salida = 0.9074\n  - Etapa 4: Entrada = 0.7933, Salida = 0.9074\n  - Etapa 5: Entrada = 0.7933, Salida = 0.8624\n  - Etapa 6: Entrada = 0.6840, Salida = 0.8624\n  - Etapa 7: Entrada = 0.6840, Salida = 0.8046\n  - Etapa 8: Entrada = 0.5611, Salida = 0.8046\n  - Etapa 9: Entrada = 0.5611, Salida = 0.7396\n  - Etapa 10: Entrada = 0.4316, Salida = 0.7396\n\nN\u00famero total de etapas: 9\n</code></pre> <p></p>"}]}